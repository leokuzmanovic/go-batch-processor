// Code generated by mockery v2.38.0. DO NOT EDIT.

package processor

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockProcessor is an autogenerated mock type for the Processor type
type MockProcessor[T interface{}] struct {
	mock.Mock
}

type MockProcessor_Expecter[T interface{}] struct {
	mock *mock.Mock
}

func (_m *MockProcessor[T]) EXPECT() *MockProcessor_Expecter[T] {
	return &MockProcessor_Expecter[T]{mock: &_m.Mock}
}

// ProcessBatch provides a mock function with given fields: ctx, batch
func (_m *MockProcessor[T]) ProcessBatch(ctx context.Context, batch []*T) ([]*T, error) {
	ret := _m.Called(ctx, batch)

	if len(ret) == 0 {
		panic("no return value specified for ProcessBatch")
	}

	var r0 []*T
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []*T) ([]*T, error)); ok {
		return rf(ctx, batch)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []*T) []*T); ok {
		r0 = rf(ctx, batch)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*T)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []*T) error); ok {
		r1 = rf(ctx, batch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockProcessor_ProcessBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProcessBatch'
type MockProcessor_ProcessBatch_Call[T interface{}] struct {
	*mock.Call
}

// ProcessBatch is a helper method to define mock.On call
//   - ctx context.Context
//   - batch []*T
func (_e *MockProcessor_Expecter[T]) ProcessBatch(ctx interface{}, batch interface{}) *MockProcessor_ProcessBatch_Call[T] {
	return &MockProcessor_ProcessBatch_Call[T]{Call: _e.mock.On("ProcessBatch", ctx, batch)}
}

func (_c *MockProcessor_ProcessBatch_Call[T]) Run(run func(ctx context.Context, batch []*T)) *MockProcessor_ProcessBatch_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]*T))
	})
	return _c
}

func (_c *MockProcessor_ProcessBatch_Call[T]) Return(_a0 []*T, _a1 error) *MockProcessor_ProcessBatch_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockProcessor_ProcessBatch_Call[T]) RunAndReturn(run func(context.Context, []*T) ([]*T, error)) *MockProcessor_ProcessBatch_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewMockProcessor creates a new instance of MockProcessor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProcessor[T interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProcessor[T] {
	mock := &MockProcessor[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
