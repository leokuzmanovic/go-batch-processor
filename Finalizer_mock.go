// Code generated by mockery v2.38.0. DO NOT EDIT.

package processor

import mock "github.com/stretchr/testify/mock"

// MockFinalizer is an autogenerated mock type for the Finalizer type
type MockFinalizer[T interface{}] struct {
	mock.Mock
}

type MockFinalizer_Expecter[T interface{}] struct {
	mock *mock.Mock
}

func (_m *MockFinalizer[T]) EXPECT() *MockFinalizer_Expecter[T] {
	return &MockFinalizer_Expecter[T]{mock: &_m.Mock}
}

// OnBatchProcessed provides a mock function with given fields: processedBatch, err
func (_m *MockFinalizer[T]) OnBatchProcessed(processedBatch []*T, err error) {
	_m.Called(processedBatch, err)
}

// MockFinalizer_OnBatchProcessed_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnBatchProcessed'
type MockFinalizer_OnBatchProcessed_Call[T interface{}] struct {
	*mock.Call
}

// OnBatchProcessed is a helper method to define mock.On call
//   - processedBatch []*T
//   - err error
func (_e *MockFinalizer_Expecter[T]) OnBatchProcessed(processedBatch interface{}, err interface{}) *MockFinalizer_OnBatchProcessed_Call[T] {
	return &MockFinalizer_OnBatchProcessed_Call[T]{Call: _e.mock.On("OnBatchProcessed", processedBatch, err)}
}

func (_c *MockFinalizer_OnBatchProcessed_Call[T]) Run(run func(processedBatch []*T, err error)) *MockFinalizer_OnBatchProcessed_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]*T), args[1].(error))
	})
	return _c
}

func (_c *MockFinalizer_OnBatchProcessed_Call[T]) Return() *MockFinalizer_OnBatchProcessed_Call[T] {
	_c.Call.Return()
	return _c
}

func (_c *MockFinalizer_OnBatchProcessed_Call[T]) RunAndReturn(run func([]*T, error)) *MockFinalizer_OnBatchProcessed_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewMockFinalizer creates a new instance of MockFinalizer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFinalizer[T interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFinalizer[T] {
	mock := &MockFinalizer[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
